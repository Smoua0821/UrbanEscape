<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Google Map Integration</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css"
    />
    <script src="/js/jquery.js"></script>
  </head>
  <body style="margin: 0">
    <div id="map" style="height: 100vh; width: 100vw"></div>
    <div class="loadingScreen">
      <div class="icon-container">
        <img alt="Map Icon" src="/images/marker.png" width="100px" />
      </div>
      <div class="text-container">
        <h2>Please Wait......</h2>
        <p>Ensure You have enabled your location for a better experience</p>
      </div>
    </div>
    <script>
      let notyf;
      $(document).ready(() => {
        notyf = new Notyf();
      });
      let polygonCoordinates = [];
      let map, markerElement, circle, marker;
      let pos = { lat: 55.5, lng: 254.7 };
      let iconMarker = document.createElement("img");
      let currentSegment = 0;
      let currentStep = 0;
      let stepsPerSegment = 100;
      let speed = 10;
      iconMarker.width = 50;
      let polyIndex = 2;
      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 5,
          center: pos,
          mapId: "main_map",
        });
        marker = new google.maps.marker.AdvancedMarkerElement({
          map: map,
          position: pos,
        });
        map.addListener("click", (event) => {
          const clickedLocation = event.latLng;
          const circleLocation = circle.getCenter();
          marker.position = {
            lat: clickedLocation.lat(),
            lng: clickedLocation.lng(),
          };
          const clickDist = haversineDistance(
            {
              lat: clickedLocation.lat(),
              lng: clickedLocation.lng(),
            },
            {
              lat: circleLocation.lat(),
              lng: circleLocation.lng(),
            }
          );
          if (clickDist <= circle.getRadius() / 1000) {
            notyf.success("Picture Added to Your Profile!");
          }
          nearestPolygon();
        });
        markerElement = new google.maps.marker.AdvancedMarkerElement({
          position: pos,
          map: map,
          content: iconMarker,
        });

        circle = new google.maps.Circle({
          center: pos,
          radius: 1000,
          map: map,
          clickable: false,
        });
        showAllPolygons();
      }

      function showAllPolygons() {
        $.get("/admin/looproute", (data, success) => {
          if (!success) return;
          polygonCoordinates = data;
          polygonCoordinates.forEach((element) => {
            new google.maps.Polyline({
              path: element.polygonCoords,
              map: map,
              clickable: false,
            });
          });
          stepsPerSegment = haversineDistance(
            polygonCoordinates[polyIndex].polygonCoords[0],
            polygonCoordinates[polyIndex].polygonCoords[1]
          );
          moveMarker(
            polygonCoordinates[polyIndex].image,
            polygonCoordinates[polyIndex].polygonCoords
          );
          animateMarker();
        });
      }

      function moveMarker(imageSrc, coordinates) {
        iconMarker.src = imageSrc;
        markerElement.position = coordinates[polyIndex];
        circle.setRadius(polygonCoordinates[polyIndex].radius);
      }

      function interpolate(start, end, factor) {
        if (
          !start ||
          !start.lat ||
          !start.lng ||
          !end ||
          !end.lat ||
          !end.lng
        ) {
          return polygonCoordinates[polyIndex].polygonCoords[0];
        }

        return {
          lat: start.lat + (end.lat - start.lat) * factor,
          lng: start.lng + (end.lng - start.lng) * factor,
        };
      }

      function animateMarker() {
        const urlParsed = new URL(iconMarker.src);
        if ((urlParsed.pathname = polygonCoordinates[polyIndex].image)) {
          iconMarker.src = polygonCoordinates[polyIndex].image;
        }
        const start =
          polygonCoordinates[polyIndex].polygonCoords[currentSegment];
        const end =
          polygonCoordinates[polyIndex].polygonCoords[currentSegment + 1];

        // Calculate the interpolation factor
        const factor = currentStep / stepsPerSegment;
        const newPos = interpolate(start, end, factor);
        markerElement.position = newPos;
        circle.setCenter(newPos);
        if (
          polygonCoordinates[polyIndex].polygonCoords.length <
          currentSegment + 1
        ) {
          currentSegment = 0;
        }
        stepsPerSegment = haversineDistance(
          polygonCoordinates[polyIndex].polygonCoords[currentSegment],
          polygonCoordinates[polyIndex].polygonCoords[currentSegment + 1]
        );
        currentStep++;

        // Move to next segment if current segment is done
        if (currentStep > stepsPerSegment) {
          currentStep = 0;
          currentSegment++;
          // Loop back to start if at the end of the polygon path
          if (
            currentSegment >=
            polygonCoordinates[polyIndex].polygonCoords.length - 1
          ) {
            currentSegment = 0;
          }
        }
        // Repeat animation
        setTimeout(animateMarker, 1000 / speed);
      }

      function haversineDistance(coords1, coords2) {
        if (!coords1 || !coords2 || !coords1.lat || !coords2.lng) return;
        const toRadians = (degrees) => degrees * (Math.PI / 180);

        const lat1 = toRadians(coords1.lat);
        const lng1 = toRadians(coords1.lng);
        const lat2 = toRadians(coords2.lat);
        const lng2 = toRadians(coords2.lng);

        const dlat = lat2 - lat1;
        const dlng = lng2 - lng1;

        const a =
          Math.sin(dlat / 2) ** 2 +
          Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlng / 2) ** 2;

        const c = 2 * Math.asin(Math.sqrt(a));

        const R = 6371;
        return R * c;
      }

      function nearestPolygon() {
        const tmpaihjhsg = {
          distance: 0,
          index: 0,
        };
        for (let index = 0; index < polygonCoordinates.length; index++) {
          const element = polygonCoordinates[index];
          const posa = {
            lat: marker.position.Fg,
            lng: marker.position.Hg,
          };
          element.polygonCoords.forEach((d) => {
            if (
              tmpaihjhsg.distance > haversineDistance(posa, d) ||
              tmpaihjhsg.distance == 0
            ) {
              tmpaihjhsg.distance = haversineDistance(posa, d);
              tmpaihjhsg.index = index;
            }
          });
        }
        if (polyIndex != tmpaihjhsg.index) {
          polyIndex = tmpaihjhsg.index;
          map.setCenter(polygonCoordinates[polyIndex].polygonCoords[0]);
        }
        return tmpaihjhsg;
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?callback=initMap&libraries=marker&key=<%= apiKey %>"></script>

    <script>
      setTimeout(function () {
        $(".loadingScreen").fadeOut(() => {
          $(".loadingScreen").remove();
        });
      }, 1000);
    </script>

    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  </body>
</html>
